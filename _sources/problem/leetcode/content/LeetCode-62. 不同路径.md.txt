# LeetCode: 62. 不同路径

[TOC]



## 1、题目描述



一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

![img](https://leetcode-cn.com/static/images/problemset/robot_maze.png)

例如，上图是一个7 x 3 的网格。有多少可能的路径？

**说明：***m* 和 *n* 的值均不超过 100。

**示例 1:**

```
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
```

**示例 2:**

```
输入: m = 7, n = 3
输出: 28
```



## 2、解题思路

​	这个题目是有规律的，我们仔细观察，能够看到，方格的列值，例如7*3，也就是说机器人可以向下走两次，

那么机器人第一步可能怎么走呢？

​	如果直接向右，也就是向下走了0步，还需要向下走两步

​	如果向下走了一步，在剩下的格子里，还需要走一步

​	如果向下走了2步，表示只能向右走



​	直观的，这道题可以用动态规划来做，如何做呢，比如，在第一行，机器人直接向右走，只有一条道

​	如果机器人直接向下走，也是只有一一条道

​	但是，其他的位置，都能由上面，和左面走过来，也就是其他的位置都是上面与左面之和

`以7*3为例`

| 0    | 1    | 1    | 1    | 1    | 1    | 1    |
| ---- | ---- | ---- | ---- | ---- | ---- | ---- |
| 1    | 2    | 3    | 4    | 5    | 6    | 7    |
| 1    | 3    | 6    | 10   | 15   | 21   | 28   |

​	从上面的表格可以看到，每个位置对应的路径条数，最终的位置就是想要求解的



```python
class Solution:
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        
        if m == 1 and n == 1:
            return 1
        dp = [[0] * m for _ in range(n)]

        dp[0][0] = 1
        for i in range(1, m):
            dp[0][i] = dp[0][i - 1]

        for i in range(1, n):
            dp[i][0] = dp[i - 1][0]

        for i in range(1, n):
            for j in range(1, m):
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]

        return dp[n - 1][m - 1]
```



