# LeetCode: 413. 等差数列划分

[TOC]

## 1、题目描述

如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。

例如，以下数列为等差数列:

```
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
```

以下数列不是等差数列。

```
1, 1, 2, 5, 7
```

 

数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0<=P<Q<N 。

如果满足以下条件，则称子数组(P, Q)为等差数组：

元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且 P + 1 < Q 。

函数要返回数组 A 中所有为等差数组的子数组个数。

 

**示例:**

```
A = [1, 2, 3, 4]

返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。
```



## 2、解题思路

​	首先，我们发现，实际上，先要找出连续的等差数列，然后算出等差数列的长度

举个例子

```
1 2 3 4 5
长度为3的等差数列有：
1 2 3
2 3 4
3 4 5
长度为4的等差数列有
1 2 3 4
2 3 4 5
长度为5的有：
1 2 3 4 5
于是，我们发现了规律
5-2
5-3
5-4
也就是1+2+3
也就是从1加到n-2为止
```

```
如果从另一个角度来看，当前的等差数列长度:
变成3：结果加1
变成4，结果加2
变成5，结果加3
变成6，结果加4
从这个角度更容易编程实现
```

```python
class Solution:
    def numberOfArithmeticSlices(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if len(A) < 3:
            return 0

        res = 0
        cur = 2
        diff = A[1] - A[0]
        for i in range(2, len(A)):
            cur_diff = A[i] - A[i - 1]
            if cur_diff == diff:
                cur += 1
            else:
                diff = cur_diff
                cur = 2

            if cur >= 3:
                res += cur - 2
        return res
```

