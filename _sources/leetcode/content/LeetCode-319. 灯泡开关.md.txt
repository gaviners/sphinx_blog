# LeetCode: 319. 灯泡开关

[TOC]



## 1、题目描述



初始时有 *n* 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 *i* 轮，每 *i* 个灯泡切换一次开关。 对于第 *n* 轮，你只切换最后一个灯泡的开关。 找出 *n* 轮后有多少个亮着的灯泡。

**示例:**

```
输入: 3
输出: 1 
解释: 
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 

你应该返回 1，因为只有一个灯泡还亮着。
```



## 2、解题思路

​	首先，我们不能进行开关的模拟，这样时间复杂度太高了，因此，肯定是要分析内部的规律

假设一共10个灯泡

- 首先分析第一个灯泡，因为第一个灯泡肯定只有在第一轮才会切换状态，并且仅仅切换一次，因此，最终状态是亮的
- 然后是第二个灯泡，会在第一轮，还有第二轮切换，因此，最终状态是灭的
- 第三个灯泡则会在1，3次切换状态，因此最终状态是灭的
- 第4个灯泡在1，2，4轮切换状态，最终状态是亮的
- 第5个灯泡则会在1，5切换状态，最终是灭的



因此，如果直接判断某个灯泡是不是亮的，直接判断他的因子的个数，如果是奇数个，就是亮的，如果是偶数个，就是灭的

那么，从1到10，因子个数分别是：

1 2 2 3 2 4 2 4 3 4

最终状态：

1 0 0 1 0 0 0 0 1 0



而且，观察可得，对每一个数，其根号的整数，正好是最终所得的结果

为何出现这样的结果呢?

我们发现，对每一个灯泡来说，如果这个灯泡的平方仍然小于n，那么他的因子就是奇数，也就是亮的





```python

class Solution:
    def bulbSwitch(self, n):
        """
        :type n: int
        :rtype: int
        """
        return int(math.sqrt(n))        
```

