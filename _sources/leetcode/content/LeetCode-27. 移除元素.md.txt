# LeetCode: 27. 移除元素

[TOC]

## 1、题目描述

```
给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

注意这五个元素可为任意顺序。

你不需要考虑数组中超出新长度后面的元素。
说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
```



## 2、解题思路

​	考虑能不能只用一次循环就得到结果呢？也就是$O(n)$的时间复杂度

​	实际上是可以的，

​	如下面的代码实现，设置两个变量，一个存储的是待删除的值的数量，另一个指向当前存储数字的位置

​	然后通过位置加删除值的数量的形式，取得新的值，在下一轮中进行判断

​	实际的判断数量就与字符串长度一致



例如

原始字符串为：321321

待删除字符为：3

循环变量：i，从0开始（第0即为第一次循环）





| 循环数量(i) /变量值 | 字符串 | 当前位置（cur_pos） | 待删除字符的数量(val_nums) |
| ------------------- | ------ | ------------------- | -------------------------- |
| 0                   | 221321 | 0                   | 1                          |
| 1                   | 211321 | 1                   | 1                          |
| 2                   | 213321 | 2                   | 1                          |
| 3                   | 212321 | 2                   | 2                          |
| 4                   | 212121 | 3                   | 2                          |
| 5                   |        | 4                   | 2                          |
| 6                   |        |                     |                            |

- 第0次 

  如上所示，一开始，判断当前的位置的字符与待删除的是不是相同，如果是，将vai_nums加一

​	然后将 `cur_pos + val_nums `位置的字符赋值到当前位置上，覆盖掉当前位置的待删除字符

- 第1次

  然后判断当前位置的字符是不是与待删除的字符相同，如果不是，就将当前位置加一

  然后将 `cur_pos + val_nums `位置的字符赋值到当前位置上



​	其余的结果依次类推，最终扫描完了种鸽数组，并且将所有的字符移动到到了应该的位置

​	



```c
int removeElement(int* nums, int numsSize, int val) {
    if (numsSize <= 0) {
        return 0;
    }
    int val_nums = 0;
    int cur_pos = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[cur_pos] == val) {
            val_nums++;
        } else {
            cur_pos++;
        }
        nums[cur_pos] = nums[cur_pos + val_nums];
    }
    return numsSize - val_nums;
}
```



根据调试模式，下面添加了一个条件，

```c
int removeElement(int* nums, int numsSize, int val) {
	if(numsSize <=0){
        return 0;
    }
    int val_nums = 0;
    int cur_pos = 0;
    for (int i = 0;  cur_pos+val_nums < numsSize && i < numsSize ; i++) {
        if (nums[cur_pos] == val) {
            val_nums++;
        } else {
            cur_pos++;
        }
        nums[cur_pos] = nums[cur_pos + val_nums];
    }
    return numsSize - val_nums;
}
```



